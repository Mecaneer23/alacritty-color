#!/bin/python3.10
import sys
import os
import argparse

PATH = os.path.expanduser("~/.config/alacritty/alacritty.yml")
LOG = True


def print_if_log(message, end="\n"):
    if LOG:
        print(message, end=end)


try:
    with open(PATH) as f:
        file = f.read()
        f.seek(0)
        lines = f.readlines()
except FileNotFoundError:
    print_if_log(f"Error: {PATH} not found")
    exit()
setter_line = [
    i
    for i, l in enumerate(file.split("\n"))
    if l.startswith("colors:") or l == "#colors:*default"
][0]
options = sorted([f"*{i.split(':')[0].strip()}" for i in file.split("\n") if "&" in i])
try:
    default_theme = [
        file.split("\n")[i + 1].split(":")[0].strip()
        for i, l in enumerate(file.split("\n"))
        if l.strip() == "###DEFAULT_THEME###"
    ][0]
except IndexError:
    print_if_log(
        "Error: no default theme found\nMake sure you have ###DEFAULT_THEME### directly before the theme in your config file"
    )
    default_theme = options[0]


def current():
    return f"({options.index('*'+lines[setter_line][9:-1])}): {lines[setter_line][9:]}"


def lst_ops(use_input=True):
    printable_options = "\n".join([f"({i}): {v[1:]}" for i, v in enumerate(options)])
    print_if_log(f"Available themes are:\n{printable_options}")
    if use_input:
        return int(input("Selection: "))


def set_new(choice, should_print=True):
    if choice in range(len(options)):
        lines[setter_line] = f"colors: {options[choice]}\n"
        if should_print:
            print_if_log(f"Set Alacritty theme to ({choice}): {options[choice][1:]}")
    else:
        set_new(convert_name_to_number(default_theme), False)
        print_if_log("Set Alacritty theme to default")

    with open(PATH, "w") as f:
        f.writelines(lines)


def isflag(idx=1):
    options_no_star = [i[1:] for i in options]
    if sys.argv[idx].isdigit():
        return int(sys.argv[idx])
    elif sys.argv[idx] in options_no_star:
        return options_no_star.index(sys.argv[idx])
    else:
        return "true"


def plus(num):
    curr = int(current().split(":")[0].strip("()"))
    if curr + num < len(options):
        set_new(curr + num)
    else:
        print_if_log("Error: reached end of list")
        set_new(curr)


def convert_name_to_number(name):
    return options.index(f"*{name}")


# def main():
#     parser = argparse.ArgumentParser(description="Alacritty Color Themes", add_help=False)
#     parser.add_argument("--help", "-h", action="help", help="show this help message and exit")
#     parser.add_argument("--current", "-c", action="store_true", help="show current theme")
#     parser.add_argument("--default", "-d", action="store_true", help="set to default theme")
#     parser.add_argument("--list", "-l", type=int, nargs="+", help="show list of themes")
#     parser.add_argument("--plus", "-p", type=int, nargs="+", help="switch to next theme")
#     parser.add_argument("--random", "-r", action="store_true", help="set to random theme")
#     parser.add_argument("--set", "-s", type=int, help="set to theme")


#     args = parser.parse_args()

# if __name__ == "__main__":
#     main()


if len(sys.argv) > 1:
    sys.argv = [i.lower() for i in sys.argv]
    if sys.argv[-1] in ("--no-echo", "-x"):
        LOG = False
    flag = isflag()
    if flag != "true":
        set_new(flag)
    else:
        if (sys.argv[1].startswith("-") or sys.argv[1].startswith("+")) and sys.argv[1][
            1:
        ].isdigit():
            plus(int(sys.argv[1]))
        else:
            match (sys.argv[1]):
                case ("--set" | "-s"):
                    set_new(isflag(2))
                case ("--current" | "-c"):
                    if len(sys.argv) == 2:
                        print_if_log(current(), end="")
                    elif len(sys.argv) == 3:
                        match (sys.argv[2]):
                            case ("--name" | "-w"):
                                print_if_log(
                                    current().split(":")[1].strip('" '), end=""
                                )
                            case ("--number" | "-d"):
                                print_if_log(current().split(":")[0].strip("()"))
                            case (_):
                                print_if_log("Error: invalid argument")
                case ("--list" | "-l"):
                    if len(sys.argv) > 2:
                        try:
                            print_if_log(
                                f"({sys.argv[2]}): {options[int(sys.argv[2])][1:]}"
                            )
                        except IndexError:
                            print_if_log("Make sure to include a valid number key")
                        except ValueError:
                            print_if_log("Make sure to include a valid number key")
                    else:
                        lst_ops(False)
                case ("--random" | "-r"):
                    import random

                    set_new(random.randrange(len(options)))
                case ("--plus" | "-p"):
                    plus(
                        int(sys.argv[2])
                        if len(sys.argv) > 2
                        and (
                            sys.argv[2].isdigit()
                            or (
                                sys.argv[2][0] in ("+", "-")
                                and sys.argv[2][1:].isdigit()
                            )
                        )
                        else 1
                    )
                case ("+"):
                    plus(1)
                case ("-"):
                    plus(-1)
                case ("--default" | "-d"):
                    set_new(convert_name_to_number(default_theme))
                case ("--help" | "-h"):
                    print_if_log(
                        "Usage:\n"
                        "alacritty-color [number, theme, [+, -] [--no-echo, -x]]\n"
                        "alacritty-color --current, -c [[--name, -w], [--number, -d]]\n"
                        "alacritty-color --default, -d\n"
                        "alacritty-color --help, -h\n"
                        "alacritty-color --list, -l [number]\n"
                        "alacritty-color --plus, -p [number]\n"
                        "alacritty-color --random, -r\n"
                        "alacritty-color --set, -s <number>\n"
                    )
                case (_):
                    print_if_log(f"Invalid command: {sys.argv[1]}")
else:
    print_if_log(current())
    try:
        set_new(lst_ops())
    except KeyboardInterrupt:
        print_if_log(f"\n\nAlacritty theme: {current()}", end="")
    except ValueError:
        print_if_log("Make sure to include a valid scheme number or name")
